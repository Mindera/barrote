apply plugin: 'com.android.library'
apply plugin: 'jacoco'
apply plugin: "io.github.ddimtirov.codacy"

android {
    compileSdkVersion rootProject.compileSdkVersion

    testBuildType "qa"

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion

        consumerProguardFiles 'proguard-rules.pro'
    }

    buildTypes {
        debug {
        }

        qa {

        }
    }

    packagingOptions {
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }

    lintOptions {
        // set to true to turn off analysis progress reporting by lint
        quiet true

        // if true, stop the gradle build if errors are found
        abortOnError false

        // do not ignore warnings
        warningsAsErrors true
    }
}

dependencies {
    //Support
    implementation "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"

    // RxJava
    implementation "io.reactivex.rxjava2:rxjava:$rootProject.rxJavaVersion"
    implementation "io.reactivex.rxjava2:rxandroid:$rootProject.rxAndroidVersion"

    // RxBindings
    implementation "com.jakewharton.rxbinding2:rxbinding-appcompat-v7:$rootProject.rxBindingsVersion"
    implementation "com.jakewharton.rxbinding2:rxbinding-appcompat-v7-kotlin:$rootProject.rxBindingsVersion"
    implementation "com.jakewharton.rxbinding2:rxbinding-recyclerview-v7:$rootProject.rxBindingsVersion"
    implementation "com.jakewharton.rxbinding2:rxbinding-support-v4:$rootProject.rxBindingsVersion"
    implementation "com.jakewharton.rxbinding2:rxbinding-design:$rootProject.rxBindingsVersion"


    testImplementation "junit:junit:$rootProject.junitVersion"
    testImplementation "org.mockito:mockito-core:$rootProject.mockitoVersion"
    testImplementation "org.powermock:powermock-module-junit4:$rootProject.powermockVersion"
    testImplementation "org.powermock:powermock-module-junit4-rule:$rootProject.powermockVersion"
    testImplementation "org.powermock:powermock-api-mockito2:$rootProject.powermockVersion"
    testImplementation "org.powermock:powermock-classloading-xstream:$rootProject.powermockVersion"
    testImplementation "org.robolectric:robolectric:$rootProject.robolectricVersion"}

jacoco {
    toolVersion "0.8.1"
}

//Unit Test Coverage filtered
task createUnitTestReport(type: JacocoReport, dependsOn: ['testQaUnitTest']) {

    reports {
        html.enabled = true
    }

    def fileFilter = [
            //Android stuff
            '**/R.class',
            '**/BR.class',
            '**/R$*.class',
            '**/BR$*.class',
            '**/BuildConfig.*',
            'android/**/*.*',
            '**/Manifest*.*',
            //Data Binding
            '**/*databinding/**/*.*',
            //Test
            '**/**Test*.*']

    //To support Java coverage on Unit tests
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/qa", excludes: fileFilter)
    //To support Kotlin coverage on Unit tests
    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/qa", excludes: fileFilter)

    def mainSrc = "${project.projectDir}/src/main/java"
    def debugSrc = "${project.projectDir}/src/debug/java"

    sourceDirectories = files([mainSrc, debugSrc])


    classDirectories = files([debugTree], [kotlinDebugTree])
    executionData = files("${buildDir}/jacoco/testQaUnitTest.exec")
}